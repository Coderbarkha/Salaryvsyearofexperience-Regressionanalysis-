# -*- coding: utf-8 -*-
"""SalaryvsYearsofexperience.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lHdaO1WaoiBIO1Jv1p-5H5lX1NVbKd_4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Load the data
data = pd.read_csv('/content/drive/MyDrive/Salary_dataset.csv')

print("Missing values:\n", data.isnull().sum())

# Calculate the average of 'Salary' and 'YearsExperience', ignoring NaN values
average_salary = data['Salary'].mean()
average_years_experience= data['YearsExperience'].mean()

# Fill NaN values with the calculated averages
data['Salary'].fillna(average_salary, inplace=True)
data['YearsExperience'].fillna(average_years_experience, inplace=True)

# Verify that there are no more missing values in the specified columns
print("\nMissing values after filling:\n", data[['Salary', 'YearsExperience']].isnull().sum())

# Split the data into training (80%) and testing (20%) sets
X = data[['YearsExperience']]  # Independent variable
y = data['Salary']            # Dependent variable

#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print the 80% training and 20% testing data
print("\nTraining Data (80%):")
print(pd.concat([X_train, y_train], axis=1).head())
print("\nTesting Data (20%):")
print(pd.concat([X_test, y_test], axis=1).head())

# Plot the training and testing data
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.scatter(X_test, y_test, color='green', label='Testing Data')
plt.title('Salary vs YearsExperience')
plt.xlabel('YearsExperience')
plt.ylabel('Salary')
plt.legend()
plt.show()

# Simple Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Print the model coefficients
print(f"\nSlope: {model.coef_[0]}")
print(f"Intercept: {model.intercept_}")

# Predictions for training and testing data
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Plot the regression line
plt.plot(X_train, y_train_pred, color='red', label='Regression Line')
plt.title('Salary vs YearsExperience')
plt.xlabel('YearsExperience')
plt.ylabel('Salary')
plt.legend()
plt.show()

# Plot the regression line
plt.plot(X_test, y_test_pred, color='red', label='Regression Line')
plt.title('Salary vs Years_Experience')
plt.xlabel('Years_Experience')
plt.ylabel('Salary')
plt.legend()
plt.show()

# Calculate mean, deviations, and predicted values for training data
train_data = pd.concat([X_train, y_train], axis=1)
train_data['Predicted_Salary'] = y_train_pred
train_data['Deviation'] = train_data['Salary'] - train_data['Predicted_Salary']

# Calculate mean, deviations, and predicted values for testing data
test_data = pd.concat([X_test, y_test], axis=1)
test_data['Predicted_Salary'] = y_test_pred
test_data['Deviation'] = test_data['Salary'] - test_data['Predicted_Salary']

# Print training data calculations
print("\nTraining Data Calculations:")
print(train_data[['YearsExperience', 'Salary', 'Predicted_Salary', 'Deviation']].head())
print(f"\nMean of Salary (Training): {train_data['Salary'].mean()}")
print(f"Mean of Predicted_Salary (Training): {train_data['Predicted_Salary'].mean()}")
print(f"Mean Deviation (Training): {train_data['Deviation'].mean()}")

# Print testing data calculations
print("\nTesting Data Calculations:")
print(test_data[['YearsExperience', 'Salary', 'Predicted_Salary', 'Deviation']].head())
print(f"\nMean of Salary (Testing): {test_data['Salary'].mean()}")
print(f"Mean of Predicted_Salary (Testing): {test_data['Predicted_Salary'].mean()}")
print(f"Mean Deviation (Testing): {test_data['Deviation'].mean()}")

# Print the R-squared value

print(f"R-squared (Training): {r2_score(y_train, y_train_pred)}")
print(f"R-squared (Testing): {r2_score(y_test, y_test_pred)}")